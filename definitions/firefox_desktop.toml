[metrics]

[metrics.content_shutdown_crashes]
data_source = "crash"
select_expression = "SUM(IF(REGEXP_CONTAINS(payload.process_type, 'content') AND REGEXP_CONTAINS(payload.metadata.ipc_channel_error, 'ShutDownKill'), 1, 0))"
friendly_name = "Content Shutdown Crashes"
description = "Number of Content Shutdown Crashes"
category = "stability"
type = "scalar"

[metrics.content_crashes]
data_source = "crash"
select_expression = "SUM(IF(REGEXP_CONTAINS(payload.process_type, 'content') AND NOT REGEXP_CONTAINS(COALESCE(payload.metadata.ipc_channel_error, ''), 'ShutDownKill'), 1, 0))"
friendly_name = "Content Crashes"
description = "Number of Content Crashes"
category = "stability"
type = "scalar"

[metrics.shutdown_hangs]
data_source = "crash"
select_expression = "SUM(IF(payload.metadata.moz_crash_reason LIKE 'MOZ_CRASH%', 1, 0))"
friendly_name = "Shutdown Hangs"
description = "Number of Shutdown Hangs"
category = "stability"
type = "scalar"

[metrics.oom_crashes]
data_source = "crash"
select_expression = "SUM(IF(payload.metadata.oom_allocation_size IS NOT NULL, 1, 0))"
friendly_name = "OOM Crashes"
description = "Number of Out of Memory Crashes"
category = "stability"
type = "scalar"

[metrics.main_crashes]
data_source = "crash"
select_expression = "SUM(IF(payload.process_type = 'main' OR payload.process_type IS NULL, 1, 0))"
friendly_name = "Main Crashes"
description = "Number of Main Crashes"
category = "stability"
type = "scalar"

[metrics.startup_crashes]
data_source = "crash"
select_expression = "SUM(IF(payload.metadata.startup_crash = '1', 1, 0))"
friendly_name = "Startup Crashes"
description = "Number of Startup Crashes"
category = "stability"
type = "scalar"

[metrics.gmplugin_crashes]
data_source = "main"
select_expression = "SUM(COALESCE(`moz-fx-data-shared-prod`.udf.keyed_histogram_get_sum(payload.keyed_histograms.subprocess_crashes_with_dump,'gmplugin'), 0))"
friendly_name = "Gmplugin Crashes"
description = "Number of GMPlugin (for loading DRM media in a highly sandboxed process) Crashes"
category = "stability"
type = "scalar"

[metrics.gpu_crashes]
data_source = "main"
select_expression = "SUM(COALESCE(`moz-fx-data-shared-prod`.udf.keyed_histogram_get_sum(payload.keyed_histograms.subprocess_crashes_with_dump, 'gpu'), 0))"
friendly_name = "Gpu Crashes"
description = "Number of GPU Crashes"
category = "stability"
type = "scalar"

[metrics.plugin_crashes]
data_source = "main"
select_expression = "SUM(COALESCE(`moz-fx-data-shared-prod`.udf.keyed_histogram_get_sum(payload.keyed_histograms.subprocess_crashes_with_dump, 'plugin'), 0))"
friendly_name = "Plugin Crashes"
description = "Number of Plugin Crashes"
category = "stability"
type = "scalar"

[metrics.child_process_launch_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.child_process_launch_ms) IGNORE NULLS)"
friendly_name = "Child Process Launch Ms"
description = "Time spent in the generic child process launching code, which is run off-main-thread and used by all child process types"
category = "performance"
type = "histogram"

[metrics.content_process_count]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.content_process_count) IGNORE NULLS)"
friendly_name = "Content Process Count"
description = "A count of the number of content processes, collected every five minutes."
category = "performance"
type = "histogram"

[metrics.content_process_max]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.content_process_max) IGNORE NULLS)"
friendly_name = "Content Process Max"
category = "performance"
description = "The maximum number of content processes, submitted when a new maximum is reached."
type = "histogram"

[metrics.checkerboard_severity]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.checkerboard_severity) IGNORE NULLS)"
friendly_name = "Checkerboard Severity"
description = "Opaque measure of the severity of a checkerboard event"
category = "performance"
type = "histogram"

[metrics.content_frame_time_vsync]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.content_frame_time_vsync) IGNORE NULLS)"
friendly_name = "Content Frame Time Vsync"
description = "The time, in percentage of a vsync interval, spent from the vsync that started a paint in the content process until that frame is presented in the compositor."
category = "performance"
type = "histogram"

[metrics.fx_new_window_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.fx_new_window_ms) IGNORE NULLS)"
friendly_name = "Fx New Window Ms"
description = "Firefox: Time taken to open a new browser window (ms)"
category = "performance"
type = "histogram"

[metrics.fx_tab_switch_composite_e10s_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.fx_tab_switch_composite_e10s_ms) IGNORE NULLS)"
friendly_name = "Fx Tab Switch Composite E10S Ms"
description = "Firefox: Time in ms between tab selection and first composite of the tab content in e10s windows"
category = "performance"
type = "histogram"

[metrics.keypress_present_latency_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.gpu.histograms.keypress_present_latency) IGNORE NULLS)"
friendly_name = "Keypress Present Latency Ms"
description = "Time between receiving a keypress event on the event loop and compositing its result onto the screen (ms)"
category = "performance"
type = "histogram"

[metrics.memory_total]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.memory_total) IGNORE NULLS)"
friendly_name = "Memory Total"
description = "Total Memory Across All Processes (KB)"
category = "performance"
type = "histogram"

[metrics.cycle_collector_max_pause]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.cycle_collector_max_pause) IGNORE NULLS)"
friendly_name = "Cycle Collector Max Pause"
description = "Longest pause for an individual slice of one cycle collection, including preparation (ms)"
category = "performance"
type = "histogram"

[metrics.cycle_collector_max_pause_content]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.cycle_collector_max_pause) IGNORE NULLS)"
friendly_name = "Cycle Collector Max Pause Content"
description = "Longest pause for an individual slice of one cycle collection, including preparation (ms)"
category = "performance"
type = "histogram"

[metrics.gc_max_pause_2]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.gc_max_pause_ms_2) IGNORE NULLS)"
friendly_name = "Gc Max Pause 2"
description = "Longest GC slice in a GC (ms)"
category = "performance"
type = "histogram"

[metrics.gc_max_pause_2_content]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.gc_max_pause_ms_2) IGNORE NULLS)"
friendly_name = "Gc Max Pause 2 Content"
description = "Longest GC slice in a GC (ms)"
category = "performance"
type = "histogram"

[metrics.gc_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.gc_ms) IGNORE NULLS)"
friendly_name = "Gc Ms"
description = "Time spent running JS GC (ms)"
category = "performance"
type = "histogram"

[metrics.gc_ms_content]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.gc_ms) IGNORE NULLS)"
friendly_name = "Gc Ms Content"
description = "Time spent running JS GC (ms) in the content process"
category = "performance"
type = "histogram"

[metrics.gc_slice_during_idle]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.gc_slice_during_idle) IGNORE NULLS)"
friendly_name = "Gc Slice During Idle"
description = "Percent of GC slice done during idle time"
category = "performance"
type = "histogram"

[metrics.gc_slice_during_idle_content]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.gc_slice_during_idle) IGNORE NULLS)"
friendly_name = "Gc Slice During Idle Content"
description = "Percent of GC slice done during idle time in the content process"
category = "performance"
type = "histogram"

[metrics.gc_non_incremental]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.gc_non_incremental) IGNORE NULLS)"
friendly_name = "Gc Non Incremental"
description = "Was the GC non-incremental?"
category = "performance"
type = "histogram"

[metrics.gc_reason_2]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.gc_reason_2) IGNORE NULLS)"
friendly_name = "Gc Reason 2"
description = "Reason (enum value) for initiating a GC"
category = "performance"
type = "histogram"

[metrics.gc_mark_rate_2]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.gc_mark_rate_2) IGNORE NULLS)"
friendly_name = "Gc Mark Rate 2"
description = "The number of objects marked per ms during GC."
category = "performance"
type = "histogram"

[metrics.gc_budget_overrun]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.gc_budget_overrun) IGNORE NULLS)"
friendly_name = "Gc Budget Overrun"
description = "How long a GC slice ran over its budget in microseconds"
category = "performance"
type = "histogram"

[metrics.memory_unique_content_startup]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.memory_unique_content_startup) IGNORE NULLS)"
friendly_name = "Memory Unique Content Startup"
description = "Unique Set Size of Content Process at Startup (KB)"
category = "performance"
type = "histogram"

[metrics.perf_first_contentful_paint_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.perf_first_contentful_paint_ms) IGNORE NULLS)"
friendly_name = "Perf First Contentful Paint Ms"
description = "The time between navigationStart and the first contentful paint of a foreground http or https root content document, in milliseconds. The contentful paint timestamp is taken during display list building and does not include rasterization or compositing of that paint."
category = "performance"
type = "histogram"

[metrics.time_to_first_interaction_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.time_to_first_interaction_ms) IGNORE NULLS)"
friendly_name = "Time To First Interaction Ms"
description = "Time in milliseconds from the first non-blank paint to the creation time of the next click, key, mouse or scroll event per top-level content browsing context."
category = "performance"
type = "histogram"

[metrics.perf_page_load_time_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.perf_page_load_time_ms) IGNORE NULLS)"
friendly_name = "Perf Page Load Time Ms"
description = "Time in milliseconds from navigationStart to loadEventStart for the foreground http or https root content document"
category = "performance"
type = "histogram"

[metrics.loaded_tab_count]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.loaded_tab_count) IGNORE NULLS)"
friendly_name = "Loaded Tab Count"
description = "Number of fully loaded (i.e., not pending from session restore) tabs opened across all windows, collected at most every 5 minutes whenever the user interacts with the browser in the following ways: open tab/window, page load, restoring a pending tab."
category = "performance"
type = "histogram"

[metrics.active_ticks]
data_source = "main"
select_expression = "SUM(payload.processes.parent.scalars.browser_engagement_active_ticks)"
friendly_name = "Browser Engagement Active Ticks"
description = "The count of the number of five-second intervals ('ticks') the user was considered 'active' in a subsession. Session activity involves keyboard or mouse interaction with the application. It does not take into account whether or not the window has focus or is in the foreground, only if it is receiving these interaction events."
category = "performance"
type = "scalar"

[metrics.subsession_length]
data_source = "main"
select_expression = "SUM(payload.info.subsession_length)"
friendly_name = "Subsession Length"
description = "The subsession length until now in seconds, monotonic"
category = "performance"
type = "scalar"

[metrics.uri_count]
data_source = "main"
select_expression = "SUM(payload.processes.parent.scalars.browser_engagement_total_uri_count)"
friendly_name = "Browser Engagement Uri Count"
description = "The count of the total non-unique http(s) URIs visited in a subsession, including page reloads, after the session has been restored. URIs on minimized or background tabs may also be counted towards this. Private browsing is not included in this count."
category = "performance"
type = "scalar"

[metrics.tab_pinned_event_count]
data_source = "main"
select_expression = "SUM(payload.processes.parent.scalars.browser_engagement_tab_pinned_event_count)"
friendly_name = "Browser Engagement Tab Pinned Event Count"
description = "The count of tab pinned events per subsession, across all windows, after the session has been restored. This includes tab pinned events from private windows."
category = "tabs"
type = "scalar"

[metrics.tab_open_event_count]
data_source = "main"
select_expression = "SUM(payload.processes.parent.scalars.browser_engagement_tab_open_event_count)"
friendly_name = "Browser Engagement Tab Open Event Count"
description = "The count of tab open events per subsession, across all windows, after the session has been restored. This includes tab open events from private windows and from manual session restorations (i.e. after crashes and from about:home)."
category = "tabs"
type = "scalar"

[metrics.tab_unload_to_reload]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.tab_unload_to_reload) IGNORE NULLS)"
friendly_name = "Tab Unload To Reload"
description = "How long (sec) a tab had been unloaded until it was reloaded."
category = "tabs"
type = "histogram"

[metrics.tab_reload_count]
data_source = "main"
select_expression = "SUM(payload.processes.parent.scalars.browser_engagement_tab_reload_count)"
friendly_name = "Browser Engagement Tab Reload Count"
description = "The count of tab reload events by the user after unloaded."
category = "tabs"
type = "scalar"

[metrics.tab_unload_count]
data_source = "main"
select_expression = "SUM(payload.processes.parent.scalars.browser_engagement_tab_unload_count)"
friendly_name = "Browser Engagement Tab Unload Count"
description = "The count of tab unload events by TabUnloader due to a low-memory situation."
category = "tabs"
type = "scalar"

[metrics.concurrent_pinned_tab_count]
data_source = "main"
select_expression = "SUM(payload.processes.parent.scalars.browser_engagement_max_concurrent_tab_pinned_count)"
friendly_name = "Browser Engagement Concurrent Pinned Tab Count"
description = "The count of maximum number of pinned tabs open during a subsession. This includes private windows and the ones opened when starting the browser. Starting Firefox 85 this includes number of restored pinned tabs at startup."
category = "tabs"
type = "scalar"

[metrics.concurrent_opened_tab_count]
data_source = "main"
select_expression = "SUM(payload.processes.parent.scalars.browser_engagement_max_concurrent_tab_count)"
friendly_name = "Browser Engagement Concurrent Opened Tab Count"
description = "The count of maximum number of tabs open during a subsession, across all windows, including tabs in private windows and restored at startup."
category = "tabs"
type = "scalar"

[metrics.opened_tab_count]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.tab_count) IGNORE NULLS)"
friendly_name = "Opened Tab Count"
description = "Number of tabs opened across all windows, collected at most every 5 minutes whenever the user interacts with the browser in the following ways: open tab/window, page load."
category = "tabs"
type = "histogram"

[metrics.js_pageload_xdr_encoding_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.js_pageload_xdr_encoding_ms) IGNORE NULLS)"
friendly_name = "Js Pageload Xdr Encoding Ms"
description = "Time spent during page load XDR encoding Javascript in ms."
category = "performance"
type = "histogram"

[metrics.js_pageload_protect_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.js_pageload_protect_ms) IGNORE NULLS)"
friendly_name = "Js Pageload Protect Ms"
description = "Time spent during page load protecting JIT executable memory."
category = "performance"
type = "histogram"

[metrics.js_pageload_parse_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.js_pageload_parse_ms) IGNORE NULLS)"
friendly_name = "Js Pageload Parse Ms"
category = "performance"
type = "histogram"

[metrics.js_pageload_execution_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.js_pageload_execution_ms) IGNORE NULLS)"
friendly_name = "Js Pageload Execution Ms"
description = "Time spent during page load syntax parsing JS scripts on the main thread in ms."
category = "performance"
type = "histogram"

[metrics.js_pageload_delazification_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.js_pageload_delazification_ms) IGNORE NULLS)"
friendly_name = "Js Pageload Delazification Ms"
description = "Time spent during page load delazifying Javascript in ms."
category = "performance"
type = "histogram"

[metrics.js_pageload_baseline_compile_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.processes.content.histograms.js_pageload_baseline_compile_ms) IGNORE NULLS)"
friendly_name = "Js Pageload Baseline Compile Ms"
description = "Time spent during page load baseline compiling Javascript in ms."
category = "performance"
type = "histogram"

[metrics.input_event_response_ms]
data_source = "main"
select_expression = "ARRAY_AGG(mozfun.hist.extract(payload.histograms.input_event_response_ms) IGNORE NULLS)"
friendly_name = "Input Event Response Ms"
description = "Time (ms) from the Input event being created to the end of it being handled for events handling during page load only"
category = "performance"
type = "histogram"

[metrics.memory_pressure_count]
data_source = "events_memory"
select_expression = "SUM(SAFE_CAST(SPLIT(event_string_value, ',')[OFFSET(1)] AS NUMERIC))"
friendly_name = "Memory Pressure Count"
description = "Event memory pressure count"
category = "performance"
type = "scalar"

[metrics.tagged_search_count]
data_source = "search_clients_engines_sources_daily"
select_expression = "SUM(tagged_sap)"
friendly_name = "Tagged Search Count"
description = "Total number of tagged searches (SAP)"
category = "search"
type = "scalar"

[metrics.tagged_follow_on_search_count]
data_source = "search_clients_engines_sources_daily"
select_expression = "SUM(tagged_follow_on)"
friendly_name = "Tagged Follow On Search Count"
description = "Total number of Tagged Follow On Search Counts"
category = "search"
type = "scalar"

[metrics.search_with_ads]
data_source = "search_clients_engines_sources_daily"
select_expression = "SUM(search_with_ads)"
friendly_name = "Search with Ads"
description = "Total number of Searches with Ads"
category = "search"
type = "scalar"

[metrics.ad_click]
data_source = "search_clients_engines_sources_daily"
select_expression = "SUM(ad_click)"
friendly_name = "Ad Clicks"
description = "Total number of Ad Clicks"
category = "search"
type = "scalar"

[metrics.organic_search_count]
data_source = "search_clients_engines_sources_daily"
select_expression = "SUM(organic)"
friendly_name = "Organic Search Count"
description = "Total number of Organic Search Counts"
category = "search"
type = "scalar"

[metrics.sap]
data_source = "search_clients_engines_sources_daily"
select_expression = "SUM(sap)"
friendly_name = "SAP Search Count"
description = "Total number of SAP search counts"
category = "search"
type = "scalar"

[metrics.ad_click_organic]
data_source = "search_clients_engines_sources_daily"
select_expression = "SUM(ad_click_organic)"
friendly_name = "Organic Ad Click Count"
description = "Total number of Organic Ad Click Counts"
category = "search"
type = "scalar"

[metrics.search_with_ads_organic]
data_source = "search_clients_engines_sources_daily"
select_expression = "SUM(search_with_ads_organic)"
friendly_name = "Organic Searches with Ads"
description = "Total number of Organic Searches with Ads"
category = "search"
type = "scalar"


[dimensions]

[dimensions.os]
data_source = "main"
select_expression = "normalized_os"
friendly_name = "Operating System"
description = "Normalized Operating System"

[dimensions.cores_count]
data_source = "main"
select_expression = "environment.system.cpu.cores"
friendly_name = "Cores Count"
description = "Number of CPU cores"

[dimensions.build]
data_source = "main"
select_expression = "SAFE.SUBSTR(application.build_id, 0, 8)"
friendly_name = "Build ID"
description = "Build ID"

[dimensions.country]
data_source = "main"
select_expression = "normalized_country_code"
friendly_name = "Country"
description = "Normalized Country Code"


[data_sources]
  
[data_sources.main]
from_expression = "mozdata.telemetry.main"
submission_date_column = "DATE(submission_timestamp)"
friendly_name = "Main"
description = "Main ping table"

[data_sources.crash]
from_expression = "mozdata.telemetry.crash"
submission_date_column = "DATE(submission_timestamp)"
description = "Crash ping table"
friendly_name = "Crash"

[data_sources.events_memory]
from_expression = """
    (
        SELECT
            *
        FROM `moz-fx-data-shared-prod.telemetry.events`
        WHERE 
            event_category = 'memory_watcher'
            AND event_method = 'on_high_memory'
            AND event_object = 'stats'
    )
"""
submission_date_column = "DATE(submission_date)"
friendly_name = "Memory events"
description = "Memory related events"

[data_sources.search_clients_engines_sources_daily]
from_expression = "mozdata.search.search_clients_engines_sources_daily"
submission_date_column = "submission_date"
friendly_name = "Search Clients Engines Sources Daily"
description = "Search Clients Engines Sources Daily"
